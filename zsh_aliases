alias upgrade="sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y && sudo apt autoclean -y && pipx upgrade-all --include-injected && upgrade-pyenv && upgrade-p10k && omz update nextcloudify"
alias reload="exec $SHELL"
alias sudo="sudo -E"
alias ack="pt"
alias howdoi="howdoi -cn 5"
alias icdiff="icdiff -HN"
alias ls="exa --icons"
alias ll="ls -lg --git --time-style=long-iso --color-scale"
alias la="ll -a"
alias lt="ll -T"
alias bat="batcat"
alias jupyter-notebook="jupyter-notebook --no-browser"
alias rst="/home/kura/.local/venvs/rich_rst/bin/python3 -m rich_rst"
alias youtube-dl="yt-dlp"
alias yt="yt-dlp -f b"
alias yt-mp3="yt-dlp --geo-bypass --no-mtime --ignore-config -f "ba" -x --audio-format mp3 $f -o '/mnt/e/Downloads/%(title)s.%(ext)s'"
alias podman_clean="podman system prune --all --force && podman rmi --all"
alias gokey="gokey -s ${HOME}/.gokeyseedfile -l 32"
alias password="cat /dev/urandom | tr -dc "a-zA-Z0-9" | fold -w 32 | head -1"

unalias ipython

dig() {
  if [[ "$@" =~ .*"@".* ]]
  then
    q -i $@
  else
    q @10.0.10.253 $@
  fi
}

hub() {
  echo "Try 'gh' instead"
}

fkill() {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

copy_dlss() {
  find /mnt/c/Program\ Files\ \(x86\)/Steam/steamapps/common /mnt/d/Games /mnt/g/Games -name "nvngx_dlss.dll" | grep -v 3DMark | while read f
  do
    cp /mnt/e/dlss/nvngx_dlss.dll "${f}"
  done
}    

nextcloudify() {
  pipx list --include-injected > /mnt/c/Users/kurah/Nextcloud/dotfiles/pipx-packages
  pyenv versions > /mnt/c/Users/kurah/Nextcloud/dotfiles/pyenv-versions
  for f in direnvrc gitconfig gitignore gitallowedsigners zsh_aliases zshenv zshrc
  do
    cp "${HOME}/.${f}" "/mnt/c/Users/kurah/Nextcloud/dotfiles/${f}"
    if [ $f = "gitconfig" ]
    then
      sed -i '/token = /d;s/email = .*/email = /g' /mnt/c/Users/kurah/Nextcloud/dotfiles/gitconfig
    fi
  done
  cp $HOME/.ssh/config /mnt/c/Users/kurah/Nextcloud/dotfiles/ssh/config
  sudo rm -rf /mnt/c/Users/kurah/Nextcloud/dotfiles/oh-my-zsh/custom/*
  sudo cp -R $HOME/.oh-my-zsh/custom/* /mnt/c/Users/kurah/Nextcloud/dotfiles/oh-my-zsh/custom/
  sudo cp -R $HOME/.config/yt-dlp /mnt/c/Users/kurah/Nextcloud/dotfiles/config
  backup-telegraf
  backup-g-wireguard
  backup-remote-wireguard
}

upgrade-p10k() {
  cur_dir=$PWD
  cd ~/.oh-my-zsh/custom/themes/powerlevel10k
  git fetch
  git rebase origin/master
  cd $cur_dir
}

upgrade-pyenv() {
  cur_dir=$PWD
  cd $HOME/.pyenv
  git fetch
  git rebase
  cd $cur_dir

  for f in `/usr/bin/ls $HOME/.pyenv/versions`
  do
    read < <( .pyenv/versions/$f/bin/pip install -qqqU pip > /dev/null & echo $! )
    pid=$REPLY
    i=0
    spin='⣷⣯⣟⡿⢿⣻⣽⣾'
    while [ -e /proc/$pid ]
    do
      printf "%s Upgrading pip in %s                    \r" "${spin:$i:1}" "${f}"
      i=$(( (i+1) %8 ))
      sleep .1
    done
  done
}

backup() {
  h=$1
  ssh $h "sudo dd if=/dev/mmcblk0 bs=100M | gzip -1 -" | dd of=/mnt/f/$h.home.arpa-backup.img.gz bs=100M
}

backup-telegraf() {
  base="/mnt/c/Users/kurah/Nextcloud/Grafana Config"
  for h in p g vpn
  do
    scp -r $h:/etc/telegraf "$base/$h"
  done
  scp -r g:/etc/influxdb "$base/g"
  scp -r g:/etc/grafana "$base/g"
  scp -r p:/etc/nginx "$base/p"
}

restart-telegraf() {
  for h in p g vpn
  do
    ssh $h 'sudo setcap CAP_NET_ADMIN+epi /usr/bin/telegraf && sudo systemctl restart telegraf'
  done
}

backup-g-wireguard() {
  base="/mnt/c/Users/kurah/Nextcloud/Grafana Config/g/wireguard"
  for f in wg0
  do
    ssh g "sudo cat /etc/wireguard/$f.conf" | sed '/PrivateKey = /d' | sed '/PreSharedKey = /d' > "$base/$f.conf"
  done
}

backup-remote-wireguard() {
  base="/mnt/c/Users/kurah/Nextcloud/Wireguard configs"
  for h in p vpn
  do
    ssh $h "sudo cat /etc/wireguard/wg0.conf" | sed '/PrivateKey = /d' | sed '/PreSharedKey = /d' > "$base/$h/wg0.conf"
  done
}

backup-influxdb-grafana-mysql() {
  base="/mnt/c/Users/kurah/Nextcloud/"
  fname="g-influxdb-grafana-mysql.tar.zst"
  fpath="${base}${fname}"

  echo "$base -name \"${fname}*.par2\" -delete"
  find $base -name "${fname}*.par2" -delete

  echo "ssh g 'sudo mysql -u root grafana > /grafana.sql'"
  ssh g 'sudo mysqldump -u root grafana > /grafana.sql'

  echo "ssh g 'sudo tar cvf - /data/influxdb /var/lib/grafana /tmp/grafana.sql --sort=name' | zstd -T0 -19 --long=27 --stdout > $fpath"
  ssh g 'sudo tar cvf - /data/influxdb /var/lib/grafana /grafana.sql --sort=name' | zstd -T0 -19 --long=27 --stdout > $fpath
  # ssh g 'cd /data/influxdb && sudo find . -print0 | sort -z | sed "s|^./||" | sudo tar cvf - --no-recursion --null -T -' | zstd -T0 -19 --long=27 --stdout > $fpath

  echo "ssh g 'sudo rm /grafana.sql'"
  ssh g 'sudo rm /grafana.sql'

  echo "par2 create -v -m16777216 -t16 -T16 -r30 -n5 $fpath"
  par2 create -v -m16777216 -t16 -T16 -r30 -n5 $fpath
  echo "par2 verify -v -m16777216 -t16 -T16 $fpath"
  par2 verify -v -m16777216 -t16 -T16 $fpath
}

backup-media-containers() {
  base="/mnt/c/Users/kurah/Nextcloud/"
  fname="media-containers.tar.zst"
  fpath="${base}${fname}"
  find $base -name "${fname}*.par2" -delete
  ssh nas 'cd /share/CACHEDEV1_DATA/DockerData && find . -name ".streams" -prune -o -print0 | sort -z | sed "s|^./||" | tar cvf - --no-recursion --null -T -' | zstd -T0 -19 --long=27 --stdout > $fpath
  par2 create -v -m16777216 -t16 -T16 -r30 -n5 $fpath
  par2 verify -v -m16777216 -t16 -T16 $fpath
}

copy-to-backup-drive() {
  nx="/mnt/c/Users/kurah/Nextcloud/"
  usb_drive="/mnt/h"
  oa="/mnt/e/OpenAudible/"

  echo "sudo mount -t drvfs h: ${usb_drive}"
  sudo mount -t drvfs h: $usb_drive

  echo "find ${usb_drive} -name '*.par2' -delete"
  sudo find $usb_drive -name "*.par2" -delete

  echo "sudo rm -rf ${usb_drive}/dotfiles/oh-my-zsh"
  sudo rm -rf $usb_drive/dotfiles/oh-my-zsh

  echo "sudo rsync -avh --progress --exclude '\$RECYCLE.BIN' --exclude '.owncloudsync.log' --exclude '.sync*' --exclude 'Desktop.ini' ${nx} ${usb_drive}"
  sudo rsync -avh --progress \
             --exclude '\$RECYCLE.BIN' \
             --exclude '.owncloudsync.log' \
             --exclude '.sync*' \
             --exclude 'Desktop.ini' \
             $nx $usb_drive
  echo "sudo rsync -avh --progress ${oa} ${usb_drive}/OpenAudible/"
  sudo rsync -avh --progress $oa $usb_drive/OpenAudible/
  sudo umount $usb_drive
}
